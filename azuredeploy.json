{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage account Type. Standard_LRS or Premium_LRS"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D1",
      "allowedValues": [
        "Standard_D1",
        "Standard_DS1",
        "Standard_D2",
        "Standard_DS2",
        "Standard_D3",
        "Standard_DS3",
        "Standard_D4",
        "Standard_DS4",
        "Standard_D11",
        "Standard_DS11",
        "Standard_D12",
        "Standard_DS12",
        "Standard_D13",
        "Standard_DS13",
        "Standard_D14",
        "Standard_DS14"
      ],
      "metadata": {
        "description": "VM Size, for Premium Storage specify DS VMs."
      }
    },
    "vmSizeDataDisks": {
      "type": "int",
      "defaultValue": 10,
      "metadata": {
        "description": "Data disks Size in GBs"
      }
    },
    "linuxFileSystem": {
      "type": "string",
      "allowedValues": [
        "ext4",
        "xfs"
      ],
      "defaultValue": "ext4",
      "metadata": {
        "description": "Linux File system"
      }
    },
    "serversRole": {
      "type": "string",
      "defaultValue": "Generic",
      "metadata": {
        "description": "Servers role, for instance webtier, database.A tag will be created with the provided value"
      }
    },
    "serversPurpose": {
      "type": "string",
      "defaultValue": "DEV",
      "metadata": {
        "description": "Servers purpose, for instance development, test, pre-production, production. A tag will be created with the provided value"
      }
    },
    "numberOfVms": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of VMs. The template will create N number of identical VMs"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin user name"
      }
    },
    "publicIPType": {
      "type": "string",
      "allowedValues": [
        "Static",
        "Dynamic"
      ],
      "defaultValue": "Dynamic",
      "metadata": {
        "description": "Public facing IP Type."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/ansible-advancedlinux/",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
      }
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
      },
      "defaultValue": ""
    }
  },
  "variables": {
    "vmStorageAccountContainerName": "vhds",
    "virtualNetworkName": "VNet01",
    "addressPrefix": "10.0.0.0/16",
    "subnet1Name": "FrontEnd",
    "subnet2Name": "Backend",
    "subnet1Prefix": "10.0.1.0/24",
    "subnet2Prefix": "10.0.2.0/24",
    "publicIPName": "VIP01",
    "vmNamePattern": "ANS",
    "VMIPAddressStart": "10.0.2.2",
    "vmNICNamePattern": "ANS",
    "sshNatRuleFrontEndPort": "6400",
    "sshNatRuleBackEndPort": "22",
    "publicIPRef": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPName'))]",
    "NICipconfig": "ipCnfgBE",
    "NICRef": "[resourceId('Microsoft.Network/networkInterfaces',variables('vmNICNamePattern'))]",
    "vnetRef": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetBackEndRef": "[concat(variables('vnetRef'),'/subnets/',variables('subnet2Name'))]",
    "FrontEndRef": "[concat(variables('vnetRef'),'/subnets/',variables('subnet1Name'))]",
    "nginxConfigLocation": "nginx",
    "sshRootPubBlobLocation": "id_rsa.pub",
    "ansiblePlaybookLocation": "InitStorage_RAID.yml",
    "customScriptAnsibleFile": "configure_ansible.sh",
    "customScriptAnsibleUrl": "[uri(parameters('_artifactsLocation'), concat(variables('customScriptAnsibleFile'), parameters('_artifactsLocationSasToken')))]",
    "customScriptAnsibleCommand": "[concat('bash ',variables('customScriptAnsibleFile'))]",
    "customScriptAnsibleParameters": "[concat(' -i ',variables('VMIPAddressStart'),' -n ',parameters('numberOfVms'),' -r ',variables('createRAID'),' -f ',parameters('linuxFileSystem'))]",
      "ansiblePlaybookUrl": "[uri(parameters('_artifactsLocation'), concat(variables('ansiblePlaybookLocation'), parameters('_artifactsLocationSasToken')))]",
    "pythonAzureScriptUrl": "[uri(parameters('_artifactsLocation'), concat('GetSSHFromPrivateStorageAccount.py', parameters('_artifactsLocationSasToken')))]",
    "ansibleVmTypes": {
      "Premium_LRS": {
        "vmSize": "Standard_DS1"
      },
      "Standard_LRS": {
        "vmSize": "Standard_A1"
      }
    },
    "currentEnvironmentSettings": "[variables('ansibleVmTypes')[parameters('storageAccountType')]]",
    "ansibleVmType": "[variables('currentEnvironmentSettings').vmSize]",
    "newStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'stg')]",
    "storageRef": "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]",
    "linuxConfiguration": {
      "disablePasswordAuthentication": false,

    }
  },
  "resources": [
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnet1Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet1Prefix')]"
            }
          },
          {
            "name": "[variables('subnet2Name')]",
            "properties": {
              "addressPrefix": "[variables('subnet2Prefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetRef')]"
      ],
      "properties": {
        "publicIPAllocationMethod": "[parameters('publicIPType')]",
      }
    },
   {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('vmNICNamePattern'),copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "NICSLoop",
        "count": "[parameters('numberOfVMS')]"
      },
      "dependsOn": [
        "[variables('vnetRef')]",
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[variables('NICipconfig')]",
            "properties": {
              "privateIPAllocationMethod": "Static ",
              "privateIPAddress": "[concat(variables('VMIPAddressStart'),copyindex())]",
              "subnet": {
                "id": "[variables('subnetBackEndRef')]"
              },
            }
          }
        ]
      }
    },
{
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNamePattern'),copyIndex())]",
      "location": "[parameters('location')]",
      "tags": {
        "ServerRole": "[parameters('serversRole')]",
        "ServerEnvironment": "[parameters('serversPurpose')]"
      },
      "copy": {
        "name": "VMsLoop",
        "count": "[parameters('numberOfVms')]"
      },
      "dependsOn": [
        "[variables('storageRef')]",
        "[concat(variables('NICRef'),copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmNamePattern'),copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "RedHat",
            "offer": "RHEL",
            "sku": "7-RAW",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmNamePattern'),copyIndex(),'_OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "[concat(variables('vmNamePattern'),copyIndex(),'_DataDisk1')]",
              "diskSizeGB": "[parameters('vmSizeDataDisks')]",
              "lun": 0,
              "caching": "ReadOnly",
              "createOption": "Empty"
            },
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[concat(variables('NICRef'),copyIndex())]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "AnsibleController",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[variables('vnetRef')]",
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[variables('NICipconfig')]",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('VMIPAddressStart'),parameters('numberOfVms'))]",
              "subnet": {
                "id": "[variables('subnetBackEndRef')]"
              },
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "AnsibleController",
      "location": "[parameters('location')]",
      "tags": {
        "ServerRole": "AnsibleController",
        "ServerEnvironment": "[parameters('serversPurpose')]"
      },
      "dependsOn": [
        "[variables('storageRef')]",
        "[resourceId('Microsoft.Network/networkInterfaces','AnsibleController')]",
        "VMsLoop"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('ansibleVMType')]"
        },
        "osProfile": {
          "computerName": "AnsibleController",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPasswordOrKey')]",
          "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "RedHat",
            "offer": "RHEL",
            "sku": "7-RAW",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat('AnsibleController','_OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces','AnsibleController')]"
            }
          ]
        }
      }
    },
 ],
}
